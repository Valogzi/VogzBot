"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable func-names, @typescript-eslint/no-unused-vars */
const events_1 = __importDefault(require("events"));
const AkairoError_js_1 = __importDefault(require("../../util/AkairoError.js"));
const AkairoModule_js_1 = __importDefault(require("../AkairoModule.js"));
/**
 * Represents a listener.
 */
class Listener extends AkairoModule_js_1.default {
    /**
     * @param id - Listener ID.
     * @param options - Options for the listener.
     */
    constructor(id, options) {
        const { category, emitter, event, type = "on" } = options;
        if (typeof emitter !== "string" && !(emitter instanceof events_1.default))
            throw new TypeError("options.emitter must be a string or an EventEmitter.");
        if (typeof event !== "string")
            throw new TypeError("options.event must be a string.");
        if (!listenersTypes.includes(type))
            throw new TypeError(`options.type must be one of ${listenersTypes.map(v => `"${v}"`).join(", ")}.`);
        super(id, { category });
        this.emitter = emitter;
        this.event = event;
        this.type = type;
    }
    /**
     * Executes the listener.
     * @param args - Arguments.
     */
    exec(...args) {
        throw new AkairoError_js_1.default("NOT_IMPLEMENTED", this.constructor.name, "exec");
    }
}
exports.default = Listener;
const listenersTypes = ["on", "once", "prependListener", "prependOnceListener"];
//# sourceMappingURL=Listener.js.map