"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AkairoError_js_1 = __importDefault(require("../../util/AkairoError.js"));
const Util_js_1 = __importDefault(require("../../util/Util.js"));
const AkairoModule_js_1 = __importDefault(require("../AkairoModule.js"));
/**
 * Represents a context menu command.
 */
class ContextMenuCommand extends AkairoModule_js_1.default {
    /**
     * @param id - Listener ID.
     * @param options - Options for the context menu command.
     */
    constructor(id, options) {
        const { category, guilds, name, ownerOnly, superUserOnly, type } = options;
        if (category !== undefined && typeof category !== "string")
            throw new TypeError("options.category must be a string.");
        if (guilds !== undefined && !Util_js_1.default.isArrayOf(guilds, "string"))
            throw new TypeError("options.guilds must be an array of strings.");
        if (name !== undefined && typeof name !== "string")
            throw new TypeError("options.name must be a string.");
        if (ownerOnly !== undefined && typeof ownerOnly !== "boolean")
            throw new TypeError("options.ownerOnly must be a boolean");
        if (type !== 2 /* User */ && type !== 3 /* Message */)
            throw new TypeError("options.type must be either ApplicationCommandType.User or ApplicationCommandType.Message.");
        super(id, { category });
        this.guilds = guilds;
        this.name = name;
        this.ownerOnly = ownerOnly;
        this.superUserOnly = superUserOnly;
        this.type = type;
    }
    /**
     * Executes the context menu command.
     * @param interaction - The context menu command interaction.
     */
    exec(interaction) {
        throw new AkairoError_js_1.default("NOT_IMPLEMENTED", this.constructor.name, "exec");
    }
}
exports.default = ContextMenuCommand;
//# sourceMappingURL=ContextMenuCommand.js.map