import type { Message } from "discord.js";
/**
 * Represents a special return value during command execution or argument parsing.
 */
export default class Flag<T extends FlagType = FlagType> {
    /**
     * The type of flag.
     */
    type: T;
    /**
     * Message to handle.
     *
     * Only exists if {@link type} is {@link FlagType.Retry}.
     */
    message: T extends FlagType.Retry ? Message : unknown;
    /**
     * The extra data for the failure.
     *
     * Only exists if {@link type} is {@link FlagType.Fail}.
     */
    value: T extends FlagType.Fail ? any : unknown;
    /**
     * Command ID.
     *
     * Only exists if {@link type} is {@link FlagType.Continue}.
     */
    command: T extends FlagType.Continue ? string : never;
    /**
     * Whether or not to ignore permission checks.
     *
     * Only exists if {@link type} is {@link FlagType.Continue}.
     */
    ignore: T extends FlagType.Continue ? boolean : never;
    /**
     *  The rest of the arguments. If this is not set, the argument handler will automatically use the rest of the content.
     *
     * Only exists if {@link type} is {@link FlagType.Continue}.
     */
    rest: T extends FlagType.Continue ? string | null : never;
    /**
     * @param type - Type of flag.
     * @param data - Extra data.
     */
    private constructor();
    private constructor();
    private constructor();
    private constructor();
    /**
     * Creates a flag that cancels the command.
     */
    static cancel(): Flag<FlagType.Cancel>;
    /**
     * Creates a flag that retries with another input.
     * @param message - Message to handle.
     */
    static retry(message: Message): Flag<FlagType.Retry>;
    /**
     * Creates a flag that acts as argument cast failure with extra data.
     * @param value - The extra data for the failure.
     */
    static fail(value: any): Flag<FlagType.Fail>;
    /**
     * Creates a flag that runs another command with the rest of the arguments.
     * @param command - Command ID.
     * @param ignore - Whether or not to ignore permission checks.
     * @param rest - The rest of the arguments. If this is not set, the argument handler will automatically use the rest of the content.
     */
    static continue(command: string, ignore?: boolean, rest?: string | null): Flag<FlagType.Continue>;
    /**
     * Checks if a value is a flag and of some type.
     * @param value - Value to check.
     * @param type - Type of flag.
     */
    static is(value: unknown, type: FlagType.Cancel): value is Flag<FlagType.Cancel>;
    static is(value: unknown, type: FlagType.Continue): value is Flag<FlagType.Continue>;
    static is(value: unknown, type: FlagType.Fail): value is Flag<FlagType.Fail>;
    static is(value: unknown, type: FlagType.Retry): value is Flag<FlagType.Retry>;
}
export declare enum FlagType {
    Cancel = "cancel",
    Retry = "retry",
    Fail = "fail",
    Continue = "continue"
}
//# sourceMappingURL=Flag.d.ts.map